name: Function App Promotion

on:
  workflow_dispatch:
    inputs:
      function_app:
        description: 'Function App to promote'
        required: true
        type: choice
        options:
          - functionapp1
          - functionapp2
      source_environment:
        description: 'Source Environment'
        required: true
        type: choice
        options:
          - dev
          - qa
      target_environment:
        description: 'Target Environment'
        required: true
        type: choice
        options:
          - qa
          - prod
      artifact_id:
        description: 'Specific artifact ID to promote (leave empty for latest)'
        required: false
        type: string

jobs:
  get-artifact:
    runs-on: ubuntu-latest
    outputs:
      artifact_name: ${{ steps.set-artifact.outputs.artifact_name }}
    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get deployment artifact
        id: set-artifact
        run: |
          # Get the latest artifact from storage if none specified
          if [ -z "${{ github.event.inputs.artifact_id }}" ]; then
            echo "Looking for latest ${{ github.event.inputs.function_app }} artifact in ${{ github.event.inputs.source_environment }}..."
            
            # List blobs and sort by date (newest first)
            LATEST_ARTIFACT=$(az storage blob list --account-name ${{ secrets.STORAGE_ACCOUNT_NAME }} --container-name function-artifacts --prefix "${{ github.event.inputs.function_app }}-${{ github.event.inputs.source_environment }}" --query "[].name" -o tsv | sort -r | head -n 1)
            
            if [ -z "$LATEST_ARTIFACT" ]; then
              echo "No artifacts found for ${{ github.event.inputs.function_app }} in ${{ github.event.inputs.source_environment }}"
              exit 1
            fi
            
            echo "artifact_name=$LATEST_ARTIFACT" >> $GITHUB_OUTPUT
            echo "Found latest artifact: $LATEST_ARTIFACT"
          else
            # Use the specified artifact ID
            ARTIFACT_NAME="${{ github.event.inputs.function_app }}-${{ github.event.inputs.source_environment }}-${{ github.event.inputs.artifact_id }}.zip"
            echo "artifact_name=$ARTIFACT_NAME" >> $GITHUB_OUTPUT
            echo "Using specified artifact: $ARTIFACT_NAME"
          fi

  promote:
    needs: get-artifact
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.target_environment }}
    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Create temp directory
        run: mkdir -p artifacts
      
      - name: Download artifact from storage
        run: |
          echo "Downloading artifact: ${{ needs.get-artifact.outputs.artifact_name }}"
          az storage blob download --account-name ${{ secrets.STORAGE_ACCOUNT_NAME }} --container-name function-artifacts --name "${{ needs.get-artifact.outputs.artifact_name }}" --file "./artifacts/${{ github.event.inputs.function_app }}.zip" --auth-mode login
          
      - name: Deploy Function App
        id: deploy-function
        uses: azure/functions-action@v1
        with:
          app-name: ${{ github.event.inputs.function_app }}-${{ github.event.inputs.target_environment }}
          package: ./artifacts/${{ github.event.inputs.function_app }}.zip
          # Using service principal authentication instead of publish profile
          
      - name: Record promotion in Azure
        run: |
          # Tag the function app with promotion information
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          RESOURCE_GROUP="MyResourceGroup" # Replace with your resource group name
          
          az tag create --resource-id /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/$RESOURCE_GROUP/providers/Microsoft.Web/sites/${{ github.event.inputs.function_app }}-${{ github.event.inputs.target_environment }} \
            --tags \
              PromotedFrom=${{ github.event.inputs.source_environment }} \
              PromotionDate=$TIMESTAMP \
              PromotedBy=${{ github.actor }} \
              SourceArtifact=${{ needs.get-artifact.outputs.artifact_name }}
              
          # In a real-world scenario, you might also want to:
          # 1. Record the promotion in a database
          # 2. Create a release note
          # 3. Send notifications
          # 4. Create a JIRA ticket or work item
          
          echo "Promotion completed: ${{ github.event.inputs.function_app }} from ${{ github.event.inputs.source_environment }} to ${{ github.event.inputs.target_environment }}"