name: FunctionApp1 CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'functionapp1/**'
      - '.github/workflows/functionapp1-cicd.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - qa

env:
  AZURE_FUNCTIONAPP_JAVA_VERSION: '21'
  AZURE_FUNCTIONAPP_PACKAGE_PATH: 'functionapp1'
  JAVA_VERSION: '21'
  JAVA_DISTRIBUTION: 'temurin'
  FUNCTION_APP_NAME: 'functionapp1'

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      build_status: ${{ job.status }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for all branches and tags

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          java-version: ${{ env.JAVA_VERSION }}
          cache: maven
          
      # # Set JAVA_HOME environment variable explicitly
      # - name: Set JAVA_HOME explicitly
      #   run: |
      #     echo "JAVA_HOME=$JAVA_HOME_21_X64" >> $GITHUB_ENV
      #     echo "Current Java home is: $JAVA_HOME"
      #     echo "Java version:"
      #     java -version

      # # Security scanning with OWASP Dependency Check
      # - name: OWASP Dependency Check
      #   uses: dependency-check/Dependency-Check_Action@main
      #   env:
      #     JAVA_HOME: ${{ env.JAVA_HOME }}
      #   with:
      #     project: 'FunctionApp1'
      #     path: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
      #     format: 'HTML'
      #     out: '${{ github.workspace }}/reports/dependency-check-report'
      #     args: >
      #       --failOnCVSS 7
      #       --enableRetired

      # Upload dependency check report as an artifact
      - name: Upload Dependency Check Report
        uses: actions/upload-artifact@v4
        if: always()  # Run even if the previous step fails
        with:
          name: dependency-check-report
          path: ${{ github.workspace }}/reports/dependency-check-report
          retention-days: 7

      # SonarCloud scanning 
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Provided automatically by GitHub
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}    # You need to set this in your repo settings
        with:
          projectBaseDir: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
          args: >
            -Dsonar.projectKey=functionapp1
            -Dsonar.organization=your-organization
            -Dsonar.java.binaries=target/classes

      # Run SpotBugs static code analysis
      - name: Run SpotBugs Analysis
        run: |
          cd ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
          mvn com.github.spotbugs:spotbugs-maven-plugin:check

      # Check for hardcoded secrets
      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

      # Regular build steps continue here
      - name: Build with Maven
        run: |
          cd ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
          mvn clean package

      - name: Run Tests
        run: |
          cd ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
          mvn test

      - name: Create function app package
        run: |
          cd ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/target/azure-functions/javafunctionapp-1738723791781
          zip -r ../../../functionapp1.zip *

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: functionapp1-${{ github.run_id }}
          path: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/functionapp1.zip
          retention-days: 30
      
  store-dev-artifact:
    needs: build
    if: needs.build.outputs.build_status == 'success' && (github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'dev'))
    uses: ./.github/workflows/artifact-management.yml
    with:
      function_app_name: 'functionapp1'
      environment: 'dev'
      run_id: ${{ github.run_id }}
    secrets: inherit
  
# deploy-dev job will only run if:
# The build job completed successfully (needs.build.outputs.build_status == 'success')
# This is important because you don't want to deploy a failed build
# AND
# Either:
# The workflow was triggered by a push to the develop branch (github.ref == 'refs/heads/develop')
# OR 
# the workflow was manually triggered (workflow_dispatch) and the user specifically selected "dev" as the environment (github.event.inputs.environment == 'dev') 

  deploy-dev:
    needs: [build, store-dev-artifact]
    if: needs.build.outputs.build_status == 'success' && (github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'dev'))
    runs-on: ubuntu-latest
    environment: 
      name: dev
      url: ${{ steps.deploy-function.outputs.app-url }}
    
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: functionapp1-${{ github.run_id }}
          path: ./

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: Deploy to Azure Function App - DEV
        id: deploy-function
        uses: azure/functions-action@v1
        with:
          app-name: functionapp1-dev-jp # Replace with your dev function app 1 Azure name
          package: functionapp1.zip
          # Using service principal authentication instead of publish profile

      - name: Add deployment tag to Function App Dev
        run: |
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          az tag create --resource-id /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/dev-jp-functionapp-rg/providers/Microsoft.Web/sites/functionapp1-dev-jp --tags LastDeployment=$TIMESTAMP DeploymentID=${{ github.run_id }} DeployedBy=${{ github.actor }}

  store-qa-artifact:
    needs: build
    if: needs.build.outputs.build_status == 'success' && (github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'qa'))
    uses: ./.github/workflows/artifact-management.yml
    with:
      function_app_name: 'functionapp1'
      environment: 'qa'
      run_id: ${{ github.run_id }}
    secrets: inherit
  

# deploy-qa job will only run if:
# The build job completed successfully (needs.build.outputs.build_status == 'success')
# This ensures you're only deploying builds that passed all compilation and tests
# AND
# Either:
# The workflow was triggered by a push to the main branch (github.ref == 'refs/heads/main')
# OR 
# the workflow was manually triggered (workflow_dispatch) and the user specifically selected "qa" as the environment (github.event.inputs.environment == 'qa')

  deploy-qa:
    needs: [build, store-qa-artifact]
    if: needs.build.outputs.build_status == 'success' && (github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'qa'))
    runs-on: ubuntu-latest
    environment: 
      name: qa
      url: ${{ steps.deploy-function.outputs.app-url }}
    
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: functionapp1-${{ github.run_id }}
          path: ./

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: Deploy to Azure Function App - QA
        id: deploy-function
        uses: azure/functions-action@v1
        with:
          app-name: functionapp1-qa-jp # Replace with your qa function app 1 Azure name
          package: functionapp1.zip
          # Using service principal authentication instead of publish profile

      - name: Add deployment tag to Function App QA
        run: |
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          az tag create --resource-id /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/qa-jp-functionapp-rg/providers/Microsoft.Web/sites/functionapp1-qa-jp --tags LastDeployment=$TIMESTAMP DeploymentID=${{ github.run_id }} DeployedBy=${{ github.actor }}

